name: "Install Python and Poetry"
author: zikoengxi
description: GitHub Action for Python projects using poetry.

branding:
  icon: 'package'
  color: 'gray-dark'

inputs:
  python-version:
    description: "The version of python to install"
    required: true
  poetry-version:
    description: "The version of poetry to install"
    required: false
    default: latest
  poetry-plugins:
    description: "The whitespace/newline separated list of poetry plugins to install"
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
    - name: Install pipx
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install --user pipx
        pipx ensurepath
    - name: Install the latest version of poetry
      shell: bash
      if: ${{ inputs.poetry-version == 'latest' }}
      run: pipx install poetry
    - name: Install the specified version of poetry
      shell: bash
      if: ${{ inputs.poetry-version != 'latest' }}
      run: pipx install poetry==${{ inputs.poetry-version }}
    - name: Configure the directory of virtualenv inside the projectâ€™s root directory
      shell: bash
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
    - name: Load the cached virtualenv
      uses: actions/cache@v4
      env:
        cache-key-prefix: ${{ runner.os }}-venv-py${{ inputs.python-version }}
      with:
        path: ./.venv
        key: ${{ env.cache-key-prefix }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ env.cache-key-prefix }}
    - name: Install poetry plugins
      shell: bash
      if: ${{ inputs.poetry-plugins != '' }}
      run: |
        POETRY_PLUGINS=$(echo "${{ inputs.poetry-plugins }}")
        for PLUGIN in ${POETRY_PLUGINS}; do
          pipx inject poetry $PLUGIN
        done
